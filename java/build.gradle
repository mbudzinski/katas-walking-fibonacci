ext {
    ver = [
            rxjava: '2.0.3',

            spock: '1.1-groovy-2.4-rc-3',
            groovy: '2.4.7',
            hamcrest: '1.3',
            cglib: '3.1',
            objenesis: '2.1',
    ]
}

buildscript {
    ext {
        ver = [
                springBoot: '1.4.0.RELEASE',
        ]
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions  x
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${ver.springBoot}")
    }
}

description = """
Base ground for Walking Fibonacci kata
"""


// Apply the java plugin to add support for Java
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'


dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR4'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenLocal()

    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    // Spock snapshots are available from the Sonatype OSS snapshot repository
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // mandatory dependencies for using Spock
    compile "org.codehaus.groovy:groovy-all:2.4.1"
    testCompile "org.spockframework:spock-core:1.1-groovy-2.4-rc-3"

    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.2.4"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.5.1"    // allows mocking of classes without default constructor (together with CGLIB)

}

compileJava {
    options.fork = true
    options.incremental = true
    options.compilerArgs << '-parameters'
}

idea {
    module {
        // love reading sources :)
        downloadSources = true
    }
}

apply plugin: "idea"
apply plugin: "eclipse"

def gitIgnore = file(".gitignore").readLines()
def gitIgnoreDirs = gitIgnore*.trim().findAll { !it.startsWith("#") && it.endsWith("/") }

idea {
    project {
        jdkName "1.8"
        configure(modules) {
            excludeDirs = files(gitIgnoreDirs) as Set
        }
    }
}
